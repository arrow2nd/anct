// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package gen

import (
	"fmt"
	"io"
	"strconv"
)

type ActivityItem interface {
	IsActivityItem()
}

// An object with an ID.
type Node interface {
	IsNode()
	// ID of the object.
	GetID() string
}

type StaffResourceItem interface {
	IsStaffResourceItem()
}

type Activity struct {
	AnnictID int64 `json:"annictId"`
	// ID of the object.
	ID   string `json:"id"`
	User User   `json:"user"`
}

func (Activity) IsNode() {}

// ID of the object.
func (this Activity) GetID() string { return this.ID }

// The connection type for Activity.
type ActivityConnection struct {
	// A list of edges.
	Edges []*ActivityEdge `json:"edges"`
	// A list of nodes.
	Nodes []*Activity `json:"nodes"`
	// Information to aid in pagination.
	PageInfo PageInfo `json:"pageInfo"`
}

// An edge in a connection.
type ActivityEdge struct {
	Action   ActivityAction `json:"action"`
	AnnictID int64          `json:"annictId"`
	// A cursor for use in pagination.
	Cursor string       `json:"cursor"`
	Item   ActivityItem `json:"item"`
	// Deprecated: Use `item` instead.
	Node ActivityItem `json:"node"`
	User User         `json:"user"`
}

type ActivityOrder struct {
	Field     ActivityOrderField `json:"field"`
	Direction OrderDirection     `json:"direction"`
}

type Cast struct {
	AnnictID   int64     `json:"annictId"`
	Character  Character `json:"character"`
	ID         string    `json:"id"`
	Name       string    `json:"name"`
	NameEn     string    `json:"nameEn"`
	Person     Person    `json:"person"`
	SortNumber int64     `json:"sortNumber"`
	Work       Work      `json:"work"`
}

func (Cast) IsNode() {}

// ID of the object.
func (this Cast) GetID() string { return this.ID }

// The connection type for Cast.
type CastConnection struct {
	// A list of edges.
	Edges []*CastEdge `json:"edges"`
	// A list of nodes.
	Nodes []*Cast `json:"nodes"`
	// Information to aid in pagination.
	PageInfo PageInfo `json:"pageInfo"`
}

// An edge in a connection.
type CastEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of the edge.
	Node *Cast `json:"node"`
}

type CastOrder struct {
	Field     CastOrderField `json:"field"`
	Direction OrderDirection `json:"direction"`
}

type Channel struct {
	AnnictID     int64              `json:"annictId"`
	ChannelGroup ChannelGroup       `json:"channelGroup"`
	ID           string             `json:"id"`
	Name         string             `json:"name"`
	Programs     *ProgramConnection `json:"programs"`
	Published    bool               `json:"published"`
	ScChid       int64              `json:"scChid"`
}

func (Channel) IsNode() {}

// ID of the object.
func (this Channel) GetID() string { return this.ID }

// The connection type for Channel.
type ChannelConnection struct {
	// A list of edges.
	Edges []*ChannelEdge `json:"edges"`
	// A list of nodes.
	Nodes []*Channel `json:"nodes"`
	// Information to aid in pagination.
	PageInfo PageInfo `json:"pageInfo"`
}

// An edge in a connection.
type ChannelEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of the edge.
	Node *Channel `json:"node"`
}

type ChannelGroup struct {
	AnnictID   int64              `json:"annictId"`
	Channels   *ChannelConnection `json:"channels"`
	ID         string             `json:"id"`
	Name       string             `json:"name"`
	SortNumber int64              `json:"sortNumber"`
}

func (ChannelGroup) IsNode() {}

// ID of the object.
func (this ChannelGroup) GetID() string { return this.ID }

type Character struct {
	Age                     string `json:"age"`
	AgeEn                   string `json:"ageEn"`
	AnnictID                int64  `json:"annictId"`
	Birthday                string `json:"birthday"`
	BirthdayEn              string `json:"birthdayEn"`
	BloodType               string `json:"bloodType"`
	BloodTypeEn             string `json:"bloodTypeEn"`
	Description             string `json:"description"`
	DescriptionEn           string `json:"descriptionEn"`
	DescriptionSource       string `json:"descriptionSource"`
	DescriptionSourceEn     string `json:"descriptionSourceEn"`
	FavoriteCharactersCount int64  `json:"favoriteCharactersCount"`
	Height                  string `json:"height"`
	HeightEn                string `json:"heightEn"`
	ID                      string `json:"id"`
	Name                    string `json:"name"`
	NameEn                  string `json:"nameEn"`
	NameKana                string `json:"nameKana"`
	Nationality             string `json:"nationality"`
	NationalityEn           string `json:"nationalityEn"`
	Nickname                string `json:"nickname"`
	NicknameEn              string `json:"nicknameEn"`
	Occupation              string `json:"occupation"`
	OccupationEn            string `json:"occupationEn"`
	Series                  Series `json:"series"`
	Weight                  string `json:"weight"`
	WeightEn                string `json:"weightEn"`
}

func (Character) IsNode() {}

// ID of the object.
func (this Character) GetID() string { return this.ID }

// The connection type for Character.
type CharacterConnection struct {
	// A list of edges.
	Edges []*CharacterEdge `json:"edges"`
	// A list of nodes.
	Nodes []*Character `json:"nodes"`
	// Information to aid in pagination.
	PageInfo PageInfo `json:"pageInfo"`
}

// An edge in a connection.
type CharacterEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of the edge.
	Node *Character `json:"node"`
}

type CharacterOrder struct {
	Field     CharacterOrderField `json:"field"`
	Direction OrderDirection      `json:"direction"`
}

// Autogenerated input type of CreateRecord
type CreateRecordInput struct {
	EpisodeID     string       `json:"episodeId"`
	Comment       *string      `json:"comment,omitempty"`
	RatingState   *RatingState `json:"ratingState,omitempty"`
	ShareTwitter  *bool        `json:"shareTwitter,omitempty"`
	ShareFacebook *bool        `json:"shareFacebook,omitempty"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of CreateRecord
type CreateRecordPayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId"`
	Record           *Record `json:"record"`
}

// Autogenerated input type of CreateReview
type CreateReviewInput struct {
	WorkID               string       `json:"workId"`
	Title                *string      `json:"title,omitempty"`
	Body                 string       `json:"body"`
	RatingOverallState   *RatingState `json:"ratingOverallState,omitempty"`
	RatingAnimationState *RatingState `json:"ratingAnimationState,omitempty"`
	RatingMusicState     *RatingState `json:"ratingMusicState,omitempty"`
	RatingStoryState     *RatingState `json:"ratingStoryState,omitempty"`
	RatingCharacterState *RatingState `json:"ratingCharacterState,omitempty"`
	ShareTwitter         *bool        `json:"shareTwitter,omitempty"`
	ShareFacebook        *bool        `json:"shareFacebook,omitempty"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of CreateReview
type CreateReviewPayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId"`
	Review           *Review `json:"review"`
}

// Autogenerated input type of DeleteRecord
type DeleteRecordInput struct {
	RecordID string `json:"recordId"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of DeleteRecord
type DeleteRecordPayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string  `json:"clientMutationId"`
	Episode          *Episode `json:"episode"`
}

// Autogenerated input type of DeleteReview
type DeleteReviewInput struct {
	ReviewID string `json:"reviewId"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of DeleteReview
type DeleteReviewPayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId"`
	Work             *Work   `json:"work"`
}

// An episode of a work
type Episode struct {
	AnnictID            int64             `json:"annictId"`
	ID                  string            `json:"id"`
	NextEpisode         *Episode          `json:"nextEpisode"`
	Number              *int64            `json:"number"`
	NumberText          *string           `json:"numberText"`
	PrevEpisode         *Episode          `json:"prevEpisode"`
	RecordCommentsCount int64             `json:"recordCommentsCount"`
	Records             *RecordConnection `json:"records"`
	RecordsCount        int64             `json:"recordsCount"`
	SatisfactionRate    *float64          `json:"satisfactionRate"`
	SortNumber          int64             `json:"sortNumber"`
	Title               *string           `json:"title"`
	ViewerDidTrack      bool              `json:"viewerDidTrack"`
	ViewerRecordsCount  int64             `json:"viewerRecordsCount"`
	Work                Work              `json:"work"`
}

func (Episode) IsNode() {}

// ID of the object.
func (this Episode) GetID() string { return this.ID }

// The connection type for Episode.
type EpisodeConnection struct {
	// A list of edges.
	Edges []*EpisodeEdge `json:"edges"`
	// A list of nodes.
	Nodes []*Episode `json:"nodes"`
	// Information to aid in pagination.
	PageInfo PageInfo `json:"pageInfo"`
}

// An edge in a connection.
type EpisodeEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of the edge.
	Node *Episode `json:"node"`
}

type EpisodeOrder struct {
	Field     EpisodeOrderField `json:"field"`
	Direction OrderDirection    `json:"direction"`
}

type LibraryEntry struct {
	ID          string   `json:"id"`
	NextEpisode *Episode `json:"nextEpisode"`
	NextProgram *Program `json:"nextProgram"`
	Note        string   `json:"note"`
	Status      *Status  `json:"status"`
	User        User     `json:"user"`
	Work        Work     `json:"work"`
}

func (LibraryEntry) IsNode() {}

// ID of the object.
func (this LibraryEntry) GetID() string { return this.ID }

// The connection type for LibraryEntry.
type LibraryEntryConnection struct {
	// A list of edges.
	Edges []*LibraryEntryEdge `json:"edges"`
	// A list of nodes.
	Nodes []*LibraryEntry `json:"nodes"`
	// Information to aid in pagination.
	PageInfo PageInfo `json:"pageInfo"`
}

// An edge in a connection.
type LibraryEntryEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of the edge.
	Node *LibraryEntry `json:"node"`
}

type LibraryEntryOrder struct {
	Field     LibraryEntryOrderField `json:"field"`
	Direction OrderDirection         `json:"direction"`
}

type MultipleRecord struct {
	AnnictID  int64             `json:"annictId"`
	CreatedAt string            `json:"createdAt"`
	ID        string            `json:"id"`
	Records   *RecordConnection `json:"records"`
	User      User              `json:"user"`
	Work      Work              `json:"work"`
}

func (MultipleRecord) IsNode() {}

// ID of the object.
func (this MultipleRecord) GetID() string { return this.ID }

func (MultipleRecord) IsActivityItem() {}

type Organization struct {
	AnnictID                   int64  `json:"annictId"`
	FavoriteOrganizationsCount int64  `json:"favoriteOrganizationsCount"`
	ID                         string `json:"id"`
	Name                       string `json:"name"`
	NameEn                     string `json:"nameEn"`
	NameKana                   string `json:"nameKana"`
	StaffsCount                int64  `json:"staffsCount"`
	TwitterUsername            string `json:"twitterUsername"`
	TwitterUsernameEn          string `json:"twitterUsernameEn"`
	URL                        string `json:"url"`
	URLEn                      string `json:"urlEn"`
	WikipediaURL               string `json:"wikipediaUrl"`
	WikipediaURLEn             string `json:"wikipediaUrlEn"`
}

func (Organization) IsNode() {}

// ID of the object.
func (this Organization) GetID() string { return this.ID }

func (Organization) IsStaffResourceItem() {}

// The connection type for Organization.
type OrganizationConnection struct {
	// A list of edges.
	Edges []*OrganizationEdge `json:"edges"`
	// A list of nodes.
	Nodes []*Organization `json:"nodes"`
	// Information to aid in pagination.
	PageInfo PageInfo `json:"pageInfo"`
}

// An edge in a connection.
type OrganizationEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of the edge.
	Node *Organization `json:"node"`
}

type OrganizationOrder struct {
	Field     OrganizationOrderField `json:"field"`
	Direction OrderDirection         `json:"direction"`
}

// Information about pagination in a connection.
type PageInfo struct {
	// When paginating forwards, the cursor to continue.
	EndCursor *string `json:"endCursor"`
	// When paginating forwards, are there more items?
	HasNextPage bool `json:"hasNextPage"`
	// When paginating backwards, are there more items?
	HasPreviousPage bool `json:"hasPreviousPage"`
	// When paginating backwards, the cursor to continue.
	StartCursor *string `json:"startCursor"`
}

type Person struct {
	AnnictID            int64      `json:"annictId"`
	Birthday            string     `json:"birthday"`
	BloodType           string     `json:"bloodType"`
	CastsCount          int64      `json:"castsCount"`
	FavoritePeopleCount int64      `json:"favoritePeopleCount"`
	GenderText          string     `json:"genderText"`
	Height              string     `json:"height"`
	ID                  string     `json:"id"`
	Name                string     `json:"name"`
	NameEn              string     `json:"nameEn"`
	NameKana            string     `json:"nameKana"`
	Nickname            string     `json:"nickname"`
	NicknameEn          string     `json:"nicknameEn"`
	Prefecture          Prefecture `json:"prefecture"`
	StaffsCount         int64      `json:"staffsCount"`
	TwitterUsername     string     `json:"twitterUsername"`
	TwitterUsernameEn   string     `json:"twitterUsernameEn"`
	URL                 string     `json:"url"`
	URLEn               string     `json:"urlEn"`
	WikipediaURL        string     `json:"wikipediaUrl"`
	WikipediaURLEn      string     `json:"wikipediaUrlEn"`
}

func (Person) IsNode() {}

// ID of the object.
func (this Person) GetID() string { return this.ID }

func (Person) IsStaffResourceItem() {}

// The connection type for Person.
type PersonConnection struct {
	// A list of edges.
	Edges []*PersonEdge `json:"edges"`
	// A list of nodes.
	Nodes []*Person `json:"nodes"`
	// Information to aid in pagination.
	PageInfo PageInfo `json:"pageInfo"`
}

// An edge in a connection.
type PersonEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of the edge.
	Node *Person `json:"node"`
}

type PersonOrder struct {
	Field     PersonOrderField `json:"field"`
	Direction OrderDirection   `json:"direction"`
}

type Prefecture struct {
	AnnictID int64  `json:"annictId"`
	ID       string `json:"id"`
	Name     string `json:"name"`
}

func (Prefecture) IsNode() {}

// ID of the object.
func (this Prefecture) GetID() string { return this.ID }

type Program struct {
	AnnictID    int64        `json:"annictId"`
	Channel     Channel      `json:"channel"`
	Episode     Episode      `json:"episode"`
	ID          string       `json:"id"`
	Rebroadcast bool         `json:"rebroadcast"`
	ScPid       *int64       `json:"scPid"`
	StartedAt   string       `json:"startedAt"`
	State       ProgramState `json:"state"`
	Work        Work         `json:"work"`
}

func (Program) IsNode() {}

// ID of the object.
func (this Program) GetID() string { return this.ID }

// The connection type for Program.
type ProgramConnection struct {
	// A list of edges.
	Edges []*ProgramEdge `json:"edges"`
	// A list of nodes.
	Nodes []*Program `json:"nodes"`
	// Information to aid in pagination.
	PageInfo PageInfo `json:"pageInfo"`
}

// An edge in a connection.
type ProgramEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of the edge.
	Node *Program `json:"node"`
}

type ProgramOrder struct {
	Field     ProgramOrderField `json:"field"`
	Direction OrderDirection    `json:"direction"`
}

type Record struct {
	AnnictID           int64        `json:"annictId"`
	Comment            *string      `json:"comment"`
	CommentsCount      int64        `json:"commentsCount"`
	CreatedAt          string       `json:"createdAt"`
	Episode            Episode      `json:"episode"`
	FacebookClickCount int64        `json:"facebookClickCount"`
	ID                 string       `json:"id"`
	LikesCount         int64        `json:"likesCount"`
	Modified           bool         `json:"modified"`
	Rating             *float64     `json:"rating"`
	RatingState        *RatingState `json:"ratingState"`
	TwitterClickCount  int64        `json:"twitterClickCount"`
	UpdatedAt          string       `json:"updatedAt"`
	User               User         `json:"user"`
	Work               Work         `json:"work"`
}

func (Record) IsNode() {}

// ID of the object.
func (this Record) GetID() string { return this.ID }

func (Record) IsActivityItem() {}

// The connection type for Record.
type RecordConnection struct {
	// A list of edges.
	Edges []*RecordEdge `json:"edges"`
	// A list of nodes.
	Nodes []*Record `json:"nodes"`
	// Information to aid in pagination.
	PageInfo PageInfo `json:"pageInfo"`
}

// An edge in a connection.
type RecordEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of the edge.
	Node *Record `json:"node"`
}

type RecordOrder struct {
	Field     RecordOrderField `json:"field"`
	Direction OrderDirection   `json:"direction"`
}

type Review struct {
	AnnictID             int64        `json:"annictId"`
	Body                 string       `json:"body"`
	CreatedAt            string       `json:"createdAt"`
	ID                   string       `json:"id"`
	ImpressionsCount     int64        `json:"impressionsCount"`
	LikesCount           int64        `json:"likesCount"`
	ModifiedAt           *string      `json:"modifiedAt"`
	RatingAnimationState *RatingState `json:"ratingAnimationState"`
	RatingCharacterState *RatingState `json:"ratingCharacterState"`
	RatingMusicState     *RatingState `json:"ratingMusicState"`
	RatingOverallState   *RatingState `json:"ratingOverallState"`
	RatingStoryState     *RatingState `json:"ratingStoryState"`
	Title                *string      `json:"title"`
	UpdatedAt            string       `json:"updatedAt"`
	User                 User         `json:"user"`
	Work                 Work         `json:"work"`
}

func (Review) IsNode() {}

// ID of the object.
func (this Review) GetID() string { return this.ID }

func (Review) IsActivityItem() {}

// The connection type for Review.
type ReviewConnection struct {
	// A list of edges.
	Edges []*ReviewEdge `json:"edges"`
	// A list of nodes.
	Nodes []*Review `json:"nodes"`
	// Information to aid in pagination.
	PageInfo PageInfo `json:"pageInfo"`
}

// An edge in a connection.
type ReviewEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of the edge.
	Node *Review `json:"node"`
}

type ReviewOrder struct {
	Field     ReviewOrderField `json:"field"`
	Direction OrderDirection   `json:"direction"`
}

type Series struct {
	AnnictID int64                 `json:"annictId"`
	ID       string                `json:"id"`
	Name     string                `json:"name"`
	NameEn   string                `json:"nameEn"`
	NameRo   string                `json:"nameRo"`
	Works    *SeriesWorkConnection `json:"works"`
}

func (Series) IsNode() {}

// ID of the object.
func (this Series) GetID() string { return this.ID }

// The connection type for Series.
type SeriesConnection struct {
	// A list of edges.
	Edges []*SeriesEdge `json:"edges"`
	// A list of nodes.
	Nodes []*Series `json:"nodes"`
	// Information to aid in pagination.
	PageInfo PageInfo `json:"pageInfo"`
}

// An edge in a connection.
type SeriesEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of the edge.
	Node *Series `json:"node"`
}

// The connection type for Work.
type SeriesWorkConnection struct {
	// A list of edges.
	Edges []*SeriesWorkEdge `json:"edges"`
	// A list of nodes.
	Nodes []*Work `json:"nodes"`
	// Information to aid in pagination.
	PageInfo PageInfo `json:"pageInfo"`
}

// An edge in a connection.
type SeriesWorkEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	Item   Work   `json:"item"`
	// Deprecated: Use `item` instead.
	Node      Work    `json:"node"`
	Summary   *string `json:"summary"`
	SummaryEn *string `json:"summaryEn"`
}

type SeriesWorkOrder struct {
	Field     SeriesWorkOrderField `json:"field"`
	Direction OrderDirection       `json:"direction"`
}

type Staff struct {
	AnnictID    int64             `json:"annictId"`
	ID          string            `json:"id"`
	Name        string            `json:"name"`
	NameEn      string            `json:"nameEn"`
	Resource    StaffResourceItem `json:"resource"`
	RoleOther   string            `json:"roleOther"`
	RoleOtherEn string            `json:"roleOtherEn"`
	RoleText    string            `json:"roleText"`
	SortNumber  int64             `json:"sortNumber"`
	Work        Work              `json:"work"`
}

func (Staff) IsNode() {}

// ID of the object.
func (this Staff) GetID() string { return this.ID }

// The connection type for Staff.
type StaffConnection struct {
	// A list of edges.
	Edges []*StaffEdge `json:"edges"`
	// A list of nodes.
	Nodes []*Staff `json:"nodes"`
	// Information to aid in pagination.
	PageInfo PageInfo `json:"pageInfo"`
}

// An edge in a connection.
type StaffEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of the edge.
	Node *Staff `json:"node"`
}

type StaffOrder struct {
	Field     StaffOrderField `json:"field"`
	Direction OrderDirection  `json:"direction"`
}

type Status struct {
	AnnictID   int64       `json:"annictId"`
	CreatedAt  string      `json:"createdAt"`
	ID         string      `json:"id"`
	LikesCount int64       `json:"likesCount"`
	State      StatusState `json:"state"`
	User       User        `json:"user"`
	Work       Work        `json:"work"`
}

func (Status) IsNode() {}

// ID of the object.
func (this Status) GetID() string { return this.ID }

func (Status) IsActivityItem() {}

// Autogenerated input type of UpdateRecord
type UpdateRecordInput struct {
	RecordID      string       `json:"recordId"`
	Comment       *string      `json:"comment,omitempty"`
	RatingState   *RatingState `json:"ratingState,omitempty"`
	ShareTwitter  *bool        `json:"shareTwitter,omitempty"`
	ShareFacebook *bool        `json:"shareFacebook,omitempty"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of UpdateRecord
type UpdateRecordPayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId"`
	Record           *Record `json:"record"`
}

// Autogenerated input type of UpdateReview
type UpdateReviewInput struct {
	ReviewID             string      `json:"reviewId"`
	Title                *string     `json:"title,omitempty"`
	Body                 string      `json:"body"`
	RatingOverallState   RatingState `json:"ratingOverallState"`
	RatingAnimationState RatingState `json:"ratingAnimationState"`
	RatingMusicState     RatingState `json:"ratingMusicState"`
	RatingStoryState     RatingState `json:"ratingStoryState"`
	RatingCharacterState RatingState `json:"ratingCharacterState"`
	ShareTwitter         *bool       `json:"shareTwitter,omitempty"`
	ShareFacebook        *bool       `json:"shareFacebook,omitempty"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of UpdateReview
type UpdateReviewPayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId"`
	Review           *Review `json:"review"`
}

// Autogenerated input type of UpdateStatus
type UpdateStatusInput struct {
	WorkID string      `json:"workId"`
	State  StatusState `json:"state"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of UpdateStatus
type UpdateStatusPayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId"`
	Work             *Work   `json:"work"`
}

type User struct {
	Activities          *ActivityConnection     `json:"activities"`
	AnnictID            int64                   `json:"annictId"`
	AvatarURL           *string                 `json:"avatarUrl"`
	BackgroundImageURL  *string                 `json:"backgroundImageUrl"`
	CreatedAt           string                  `json:"createdAt"`
	Description         string                  `json:"description"`
	Email               *string                 `json:"email"`
	Followers           *UserConnection         `json:"followers"`
	FollowersCount      int64                   `json:"followersCount"`
	Following           *UserConnection         `json:"following"`
	FollowingActivities *ActivityConnection     `json:"followingActivities"`
	FollowingsCount     int64                   `json:"followingsCount"`
	ID                  string                  `json:"id"`
	LibraryEntries      *LibraryEntryConnection `json:"libraryEntries"`
	Name                string                  `json:"name"`
	NotificationsCount  *int64                  `json:"notificationsCount"`
	OnHoldCount         int64                   `json:"onHoldCount"`
	Programs            *ProgramConnection      `json:"programs"`
	Records             *RecordConnection       `json:"records"`
	RecordsCount        int64                   `json:"recordsCount"`
	StopWatchingCount   int64                   `json:"stopWatchingCount"`
	URL                 *string                 `json:"url"`
	Username            string                  `json:"username"`
	ViewerCanFollow     bool                    `json:"viewerCanFollow"`
	ViewerIsFollowing   bool                    `json:"viewerIsFollowing"`
	WannaWatchCount     int64                   `json:"wannaWatchCount"`
	WatchedCount        int64                   `json:"watchedCount"`
	WatchingCount       int64                   `json:"watchingCount"`
	Works               *WorkConnection         `json:"works"`
}

func (User) IsNode() {}

// ID of the object.
func (this User) GetID() string { return this.ID }

// The connection type for User.
type UserConnection struct {
	// A list of edges.
	Edges []*UserEdge `json:"edges"`
	// A list of nodes.
	Nodes []*User `json:"nodes"`
	// Information to aid in pagination.
	PageInfo PageInfo `json:"pageInfo"`
}

// An edge in a connection.
type UserEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of the edge.
	Node *User `json:"node"`
}

// An anime title
type Work struct {
	AnnictID          int64              `json:"annictId"`
	Casts             *CastConnection    `json:"casts"`
	Episodes          *EpisodeConnection `json:"episodes"`
	EpisodesCount     int64              `json:"episodesCount"`
	ID                string             `json:"id"`
	Image             *WorkImage         `json:"image"`
	MalAnimeID        *string            `json:"malAnimeId"`
	Media             Media              `json:"media"`
	NoEpisodes        bool               `json:"noEpisodes"`
	OfficialSiteURL   *string            `json:"officialSiteUrl"`
	OfficialSiteURLEn *string            `json:"officialSiteUrlEn"`
	Programs          *ProgramConnection `json:"programs"`
	Reviews           *ReviewConnection  `json:"reviews"`
	ReviewsCount      int64              `json:"reviewsCount"`
	SatisfactionRate  *float64           `json:"satisfactionRate"`
	SeasonName        *SeasonName        `json:"seasonName"`
	SeasonYear        *int64             `json:"seasonYear"`
	SeriesList        *SeriesConnection  `json:"seriesList"`
	Staffs            *StaffConnection   `json:"staffs"`
	SyobocalTid       *int64             `json:"syobocalTid"`
	Title             string             `json:"title"`
	TitleEn           *string            `json:"titleEn"`
	TitleKana         *string            `json:"titleKana"`
	TitleRo           *string            `json:"titleRo"`
	TwitterHashtag    *string            `json:"twitterHashtag"`
	TwitterUsername   *string            `json:"twitterUsername"`
	ViewerStatusState *StatusState       `json:"viewerStatusState"`
	WatchersCount     int64              `json:"watchersCount"`
	WikipediaURL      *string            `json:"wikipediaUrl"`
	WikipediaURLEn    *string            `json:"wikipediaUrlEn"`
}

func (Work) IsNode() {}

// ID of the object.
func (this Work) GetID() string { return this.ID }

// The connection type for Work.
type WorkConnection struct {
	// A list of edges.
	Edges []*WorkEdge `json:"edges"`
	// A list of nodes.
	Nodes []*Work `json:"nodes"`
	// Information to aid in pagination.
	PageInfo PageInfo `json:"pageInfo"`
}

// An edge in a connection.
type WorkEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of the edge.
	Node *Work `json:"node"`
}

type WorkImage struct {
	AnnictID               *int64  `json:"annictId"`
	Copyright              *string `json:"copyright"`
	FacebookOgImageURL     *string `json:"facebookOgImageUrl"`
	ID                     string  `json:"id"`
	InternalURL            *string `json:"internalUrl"`
	RecommendedImageURL    *string `json:"recommendedImageUrl"`
	TwitterAvatarURL       *string `json:"twitterAvatarUrl"`
	TwitterBiggerAvatarURL *string `json:"twitterBiggerAvatarUrl"`
	TwitterMiniAvatarURL   *string `json:"twitterMiniAvatarUrl"`
	TwitterNormalAvatarURL *string `json:"twitterNormalAvatarUrl"`
	Work                   *Work   `json:"work"`
}

func (WorkImage) IsNode() {}

// ID of the object.
func (this WorkImage) GetID() string { return this.ID }

type WorkOrder struct {
	Field     WorkOrderField `json:"field"`
	Direction OrderDirection `json:"direction"`
}

type ActivityAction string

const (
	ActivityActionCreate ActivityAction = "CREATE"
)

var AllActivityAction = []ActivityAction{
	ActivityActionCreate,
}

func (e ActivityAction) IsValid() bool {
	switch e {
	case ActivityActionCreate:
		return true
	}
	return false
}

func (e ActivityAction) String() string {
	return string(e)
}

func (e *ActivityAction) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ActivityAction(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ActivityAction", str)
	}
	return nil
}

func (e ActivityAction) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ActivityOrderField string

const (
	ActivityOrderFieldCreatedAt ActivityOrderField = "CREATED_AT"
)

var AllActivityOrderField = []ActivityOrderField{
	ActivityOrderFieldCreatedAt,
}

func (e ActivityOrderField) IsValid() bool {
	switch e {
	case ActivityOrderFieldCreatedAt:
		return true
	}
	return false
}

func (e ActivityOrderField) String() string {
	return string(e)
}

func (e *ActivityOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ActivityOrderField(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ActivityOrderField", str)
	}
	return nil
}

func (e ActivityOrderField) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type CastOrderField string

const (
	CastOrderFieldCreatedAt  CastOrderField = "CREATED_AT"
	CastOrderFieldSortNumber CastOrderField = "SORT_NUMBER"
)

var AllCastOrderField = []CastOrderField{
	CastOrderFieldCreatedAt,
	CastOrderFieldSortNumber,
}

func (e CastOrderField) IsValid() bool {
	switch e {
	case CastOrderFieldCreatedAt, CastOrderFieldSortNumber:
		return true
	}
	return false
}

func (e CastOrderField) String() string {
	return string(e)
}

func (e *CastOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CastOrderField(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CastOrderField", str)
	}
	return nil
}

func (e CastOrderField) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type CharacterOrderField string

const (
	CharacterOrderFieldCreatedAt               CharacterOrderField = "CREATED_AT"
	CharacterOrderFieldFavoriteCharactersCount CharacterOrderField = "FAVORITE_CHARACTERS_COUNT"
)

var AllCharacterOrderField = []CharacterOrderField{
	CharacterOrderFieldCreatedAt,
	CharacterOrderFieldFavoriteCharactersCount,
}

func (e CharacterOrderField) IsValid() bool {
	switch e {
	case CharacterOrderFieldCreatedAt, CharacterOrderFieldFavoriteCharactersCount:
		return true
	}
	return false
}

func (e CharacterOrderField) String() string {
	return string(e)
}

func (e *CharacterOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CharacterOrderField(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CharacterOrderField", str)
	}
	return nil
}

func (e CharacterOrderField) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type EpisodeOrderField string

const (
	EpisodeOrderFieldCreatedAt  EpisodeOrderField = "CREATED_AT"
	EpisodeOrderFieldSortNumber EpisodeOrderField = "SORT_NUMBER"
)

var AllEpisodeOrderField = []EpisodeOrderField{
	EpisodeOrderFieldCreatedAt,
	EpisodeOrderFieldSortNumber,
}

func (e EpisodeOrderField) IsValid() bool {
	switch e {
	case EpisodeOrderFieldCreatedAt, EpisodeOrderFieldSortNumber:
		return true
	}
	return false
}

func (e EpisodeOrderField) String() string {
	return string(e)
}

func (e *EpisodeOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = EpisodeOrderField(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid EpisodeOrderField", str)
	}
	return nil
}

func (e EpisodeOrderField) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type LibraryEntryOrderField string

const (
	// 最後に記録またはスキップした日時
	LibraryEntryOrderFieldLastTrackedAt LibraryEntryOrderField = "LAST_TRACKED_AT"
)

var AllLibraryEntryOrderField = []LibraryEntryOrderField{
	LibraryEntryOrderFieldLastTrackedAt,
}

func (e LibraryEntryOrderField) IsValid() bool {
	switch e {
	case LibraryEntryOrderFieldLastTrackedAt:
		return true
	}
	return false
}

func (e LibraryEntryOrderField) String() string {
	return string(e)
}

func (e *LibraryEntryOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = LibraryEntryOrderField(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid LibraryEntryOrderField", str)
	}
	return nil
}

func (e LibraryEntryOrderField) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Media of anime
type Media string

const (
	MediaTv    Media = "TV"
	MediaOva   Media = "OVA"
	MediaMovie Media = "MOVIE"
	MediaWeb   Media = "WEB"
	MediaOther Media = "OTHER"
)

var AllMedia = []Media{
	MediaTv,
	MediaOva,
	MediaMovie,
	MediaWeb,
	MediaOther,
}

func (e Media) IsValid() bool {
	switch e {
	case MediaTv, MediaOva, MediaMovie, MediaWeb, MediaOther:
		return true
	}
	return false
}

func (e Media) String() string {
	return string(e)
}

func (e *Media) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Media(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Media", str)
	}
	return nil
}

func (e Media) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type OrderDirection string

const (
	OrderDirectionAsc  OrderDirection = "ASC"
	OrderDirectionDesc OrderDirection = "DESC"
)

var AllOrderDirection = []OrderDirection{
	OrderDirectionAsc,
	OrderDirectionDesc,
}

func (e OrderDirection) IsValid() bool {
	switch e {
	case OrderDirectionAsc, OrderDirectionDesc:
		return true
	}
	return false
}

func (e OrderDirection) String() string {
	return string(e)
}

func (e *OrderDirection) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OrderDirection(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OrderDirection", str)
	}
	return nil
}

func (e OrderDirection) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type OrganizationOrderField string

const (
	OrganizationOrderFieldCreatedAt                  OrganizationOrderField = "CREATED_AT"
	OrganizationOrderFieldFavoriteOrganizationsCount OrganizationOrderField = "FAVORITE_ORGANIZATIONS_COUNT"
)

var AllOrganizationOrderField = []OrganizationOrderField{
	OrganizationOrderFieldCreatedAt,
	OrganizationOrderFieldFavoriteOrganizationsCount,
}

func (e OrganizationOrderField) IsValid() bool {
	switch e {
	case OrganizationOrderFieldCreatedAt, OrganizationOrderFieldFavoriteOrganizationsCount:
		return true
	}
	return false
}

func (e OrganizationOrderField) String() string {
	return string(e)
}

func (e *OrganizationOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OrganizationOrderField(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OrganizationOrderField", str)
	}
	return nil
}

func (e OrganizationOrderField) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type PersonOrderField string

const (
	PersonOrderFieldCreatedAt           PersonOrderField = "CREATED_AT"
	PersonOrderFieldFavoritePeopleCount PersonOrderField = "FAVORITE_PEOPLE_COUNT"
)

var AllPersonOrderField = []PersonOrderField{
	PersonOrderFieldCreatedAt,
	PersonOrderFieldFavoritePeopleCount,
}

func (e PersonOrderField) IsValid() bool {
	switch e {
	case PersonOrderFieldCreatedAt, PersonOrderFieldFavoritePeopleCount:
		return true
	}
	return false
}

func (e PersonOrderField) String() string {
	return string(e)
}

func (e *PersonOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PersonOrderField(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PersonOrderField", str)
	}
	return nil
}

func (e PersonOrderField) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ProgramOrderField string

const (
	ProgramOrderFieldStartedAt ProgramOrderField = "STARTED_AT"
)

var AllProgramOrderField = []ProgramOrderField{
	ProgramOrderFieldStartedAt,
}

func (e ProgramOrderField) IsValid() bool {
	switch e {
	case ProgramOrderFieldStartedAt:
		return true
	}
	return false
}

func (e ProgramOrderField) String() string {
	return string(e)
}

func (e *ProgramOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ProgramOrderField(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ProgramOrderField", str)
	}
	return nil
}

func (e ProgramOrderField) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ProgramState string

const (
	ProgramStatePublished ProgramState = "PUBLISHED"
	ProgramStateHidden    ProgramState = "HIDDEN"
)

var AllProgramState = []ProgramState{
	ProgramStatePublished,
	ProgramStateHidden,
}

func (e ProgramState) IsValid() bool {
	switch e {
	case ProgramStatePublished, ProgramStateHidden:
		return true
	}
	return false
}

func (e ProgramState) String() string {
	return string(e)
}

func (e *ProgramState) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ProgramState(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ProgramState", str)
	}
	return nil
}

func (e ProgramState) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type RatingState string

const (
	RatingStateGreat   RatingState = "GREAT"
	RatingStateGood    RatingState = "GOOD"
	RatingStateAverage RatingState = "AVERAGE"
	RatingStateBad     RatingState = "BAD"
)

var AllRatingState = []RatingState{
	RatingStateGreat,
	RatingStateGood,
	RatingStateAverage,
	RatingStateBad,
}

func (e RatingState) IsValid() bool {
	switch e {
	case RatingStateGreat, RatingStateGood, RatingStateAverage, RatingStateBad:
		return true
	}
	return false
}

func (e RatingState) String() string {
	return string(e)
}

func (e *RatingState) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = RatingState(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid RatingState", str)
	}
	return nil
}

func (e RatingState) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type RecordOrderField string

const (
	RecordOrderFieldCreatedAt  RecordOrderField = "CREATED_AT"
	RecordOrderFieldLikesCount RecordOrderField = "LIKES_COUNT"
)

var AllRecordOrderField = []RecordOrderField{
	RecordOrderFieldCreatedAt,
	RecordOrderFieldLikesCount,
}

func (e RecordOrderField) IsValid() bool {
	switch e {
	case RecordOrderFieldCreatedAt, RecordOrderFieldLikesCount:
		return true
	}
	return false
}

func (e RecordOrderField) String() string {
	return string(e)
}

func (e *RecordOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = RecordOrderField(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid RecordOrderField", str)
	}
	return nil
}

func (e RecordOrderField) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ReviewOrderField string

const (
	ReviewOrderFieldCreatedAt  ReviewOrderField = "CREATED_AT"
	ReviewOrderFieldLikesCount ReviewOrderField = "LIKES_COUNT"
)

var AllReviewOrderField = []ReviewOrderField{
	ReviewOrderFieldCreatedAt,
	ReviewOrderFieldLikesCount,
}

func (e ReviewOrderField) IsValid() bool {
	switch e {
	case ReviewOrderFieldCreatedAt, ReviewOrderFieldLikesCount:
		return true
	}
	return false
}

func (e ReviewOrderField) String() string {
	return string(e)
}

func (e *ReviewOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ReviewOrderField(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ReviewOrderField", str)
	}
	return nil
}

func (e ReviewOrderField) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Season name
type SeasonName string

const (
	SeasonNameWinter SeasonName = "WINTER"
	SeasonNameSpring SeasonName = "SPRING"
	SeasonNameSummer SeasonName = "SUMMER"
	SeasonNameAutumn SeasonName = "AUTUMN"
)

var AllSeasonName = []SeasonName{
	SeasonNameWinter,
	SeasonNameSpring,
	SeasonNameSummer,
	SeasonNameAutumn,
}

func (e SeasonName) IsValid() bool {
	switch e {
	case SeasonNameWinter, SeasonNameSpring, SeasonNameSummer, SeasonNameAutumn:
		return true
	}
	return false
}

func (e SeasonName) String() string {
	return string(e)
}

func (e *SeasonName) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SeasonName(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SeasonName", str)
	}
	return nil
}

func (e SeasonName) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type SeriesWorkOrderField string

const (
	SeriesWorkOrderFieldSeason SeriesWorkOrderField = "SEASON"
)

var AllSeriesWorkOrderField = []SeriesWorkOrderField{
	SeriesWorkOrderFieldSeason,
}

func (e SeriesWorkOrderField) IsValid() bool {
	switch e {
	case SeriesWorkOrderFieldSeason:
		return true
	}
	return false
}

func (e SeriesWorkOrderField) String() string {
	return string(e)
}

func (e *SeriesWorkOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SeriesWorkOrderField(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SeriesWorkOrderField", str)
	}
	return nil
}

func (e SeriesWorkOrderField) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type StaffOrderField string

const (
	StaffOrderFieldCreatedAt  StaffOrderField = "CREATED_AT"
	StaffOrderFieldSortNumber StaffOrderField = "SORT_NUMBER"
)

var AllStaffOrderField = []StaffOrderField{
	StaffOrderFieldCreatedAt,
	StaffOrderFieldSortNumber,
}

func (e StaffOrderField) IsValid() bool {
	switch e {
	case StaffOrderFieldCreatedAt, StaffOrderFieldSortNumber:
		return true
	}
	return false
}

func (e StaffOrderField) String() string {
	return string(e)
}

func (e *StaffOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = StaffOrderField(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid StaffOrderField", str)
	}
	return nil
}

func (e StaffOrderField) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type StatusState string

const (
	StatusStateWannaWatch   StatusState = "WANNA_WATCH"
	StatusStateWatching     StatusState = "WATCHING"
	StatusStateWatched      StatusState = "WATCHED"
	StatusStateOnHold       StatusState = "ON_HOLD"
	StatusStateStopWatching StatusState = "STOP_WATCHING"
	StatusStateNoState      StatusState = "NO_STATE"
)

var AllStatusState = []StatusState{
	StatusStateWannaWatch,
	StatusStateWatching,
	StatusStateWatched,
	StatusStateOnHold,
	StatusStateStopWatching,
	StatusStateNoState,
}

func (e StatusState) IsValid() bool {
	switch e {
	case StatusStateWannaWatch, StatusStateWatching, StatusStateWatched, StatusStateOnHold, StatusStateStopWatching, StatusStateNoState:
		return true
	}
	return false
}

func (e StatusState) String() string {
	return string(e)
}

func (e *StatusState) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = StatusState(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid StatusState", str)
	}
	return nil
}

func (e StatusState) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type WorkOrderField string

const (
	WorkOrderFieldCreatedAt     WorkOrderField = "CREATED_AT"
	WorkOrderFieldSeason        WorkOrderField = "SEASON"
	WorkOrderFieldWatchersCount WorkOrderField = "WATCHERS_COUNT"
)

var AllWorkOrderField = []WorkOrderField{
	WorkOrderFieldCreatedAt,
	WorkOrderFieldSeason,
	WorkOrderFieldWatchersCount,
}

func (e WorkOrderField) IsValid() bool {
	switch e {
	case WorkOrderFieldCreatedAt, WorkOrderFieldSeason, WorkOrderFieldWatchersCount:
		return true
	}
	return false
}

func (e WorkOrderField) String() string {
	return string(e)
}

func (e *WorkOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = WorkOrderField(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid WorkOrderField", str)
	}
	return nil
}

func (e WorkOrderField) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
